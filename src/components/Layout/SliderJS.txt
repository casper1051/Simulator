export default class Slider extends React.Component {
    constructor(props) {
      super(props);
      this.childRef = React.createRef();
      this.ref = React.createRef();
      let { style = {} } = props;
      this.state = {
        height: style.height || "500px",
        width: style.width || "500px"
      };
    }
    render() {
      let side = this.props.side;
      let movesHorizontal = side === "right" || side === "left";
      let requestingFrame = false;
      let dragging = false;
      let dragDist = 0;
      let barPosition = null;
      let mouseIsOver = true;
  
      const onClick = e => {
        document.body.style.cursor = this.ref.current.style.cursor = movesHorizontal
          ? "col-resize"
          : "row-resize";
        barPosition = movesHorizontal ? e.clientX : e.clientY;
        dragging = true;
      };
      document.addEventListener("mousemove", e => {
        if (dragging && e[movesHorizontal ? "movementX" : "movementY"]) {
          dragDist += e[movesHorizontal ? "movementX" : "movementY"];
        }
        if (!requestingFrame && dragging && dragDist) {
          requestingFrame = true;
          requestAnimationFrame(() => {
            requestingFrame = false;
            dragDist = (side === "left" || side === "top")? -dragDist : dragDist;
            let dimension =
              this.childRef.current[
                movesHorizontal ? "clientWidth" : "clientHeight"
              ] + dragDist;
            dimension = dimension > 0 ? dimension : 0;
            // let parentDimension = this.ref.current.parent.style[movesHorizontal ? "width" : "height"] > 
            // if(dimesion >)
            this.setState({
              [movesHorizontal ? "width" : "height"]: dimension + "px"
            });
            dragDist = 0;
          });
        }
      });
      document.addEventListener("mouseup", e => {
        document.body.style.cursor = "auto";
        this.ref.current.style.cursor = movesHorizontal
          ? "col-resize"
          : "row-resize"; //"pointer"
        dragging = false;
      });
  
      let containerStyle = this.props.containerStyle || {}
      let sliderStyle = this.props.sliderStyle || {}
      return (
        <div 
          style={{ 
            display: "flex", 
              alignItems:"stretch",
              flexDirection:(side==="bottom")?"column":(side==="top")?"column-reverse":(side==="left")?"row-reverse":"row" ,
                justifyContent: (side==="top" || side==="left") ? "flex-end" : "flex-start",
                  ...containerStyle
          }}>
          {React.cloneElement(this.props.children, {
            style: {
              ...this.props.children.props.style,
              height: this.state.height,
              width: this.state.width,
              // onResize
            },
            ref: this.childRef
          })}
          <div
            ref={this.ref}
            onMouseDown={onClick}
            style={{
              backgroundColor: "blue",
              [movesHorizontal ? "width" : "height"]:"20px",
              cursor: movesHorizontal ? "col-resize" : "row-resize", 
              ...sliderStyle
            }}
          />
        </div>
      );
    }
  }
  